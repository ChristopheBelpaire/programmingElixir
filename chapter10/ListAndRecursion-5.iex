defmodule MyEnum do
  def all?([],_) do
    true
  end

  def all?([head| tail], func) do
    if func.(head) do
      all?(tail, func)
    else
      false
    end
  end

  def each([e], func) do
    func.(e)
  end

  def each([head | tail], func) do
    func.(head)
    each(tail, func)
  end

  def split(list, count) do
    _split(list, count, [])
  end

  defp _split([head | tail], count, before) when length(before) < count do
    _split(tail, count, before ++ [head])
  end

  defp _split(list, count, before) do
    {before, list}
  end

  def filter([],_) do
    []
  end

  def filter([head| tail], func) do
    if func.(head) do
      head + filter(tail, func)
    else
      filter(tail, func)
    end
  end
end